<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="position" namespace="fn" return="jQuery">
	<desc>Place an element relative to another</desc>
	<longdesc>
		<p>Utility script for positioning any widget relative to the window, document, a particular element, or the cursor/mouse.</p>
		<p><em>Note: jQuery UI does not support positioning hidden elements.</em></p>
		<p>This is a standalone jQuery plugin and has no dependencies on other jQuery UI components.</p>
		<p>This plugin extends jQuery's built-in position getter method. If you forget to include this plugin, code calling position() won't fail directly, as the method still exists. But it'll just retrieve the position instead of setting it.</p>
	</longdesc>
	<signature>
		<argument name="options" type="Options"></argument>
	</signature>
	<options>
		<option name="my" default='"center"'>
			<desc>Defines which position <strong>on the element being positioned</strong> to align with the target element: "horizontal vertical" alignment. A single value such as "right" will default to "right center", "top" will default to "center top" (following CSS convention). Acceptable values: "top", "center", "bottom", "left", "right". Example: "left top" or "center center". Each dimension can also contains offsets, in pixels or percent, e.g. `right+10 top-25%`. A perecentage is relative to the element being positioned.</desc>
			<type name="String" />
		</option>
		<option name="at" default='"center"'>
			<desc>Defines which position <strong>on the target element</strong> to align the positioned element against: "horizontal vertical" alignment. A single value such as "right" will default to "right center", "top" will default to "center top" (following CSS convention). Acceptable values: "top", "center", "bottom", "left", "right". Example: "left top" or "center center". Each dimension can also contains offsets, in pixels or percent, e.g. `right+10 top-25%`. A perecentage is relative to the target element.</desc>
			<type name="String" />
		</option>
		<option name="of" type="Selector, Element, jQuery, Event" default='null'>
			<desc>Element to position against. If you provide a selector or jQuery object, the first matching element will be used. If you provide an event object, the pageX and pageY properties will be used. Example: "#top-menu"</desc>
			<type name="Selector" />
			<type name="Element" />
			<type name="jQuery" />
			<type name="Event" />
		</option>
		<option name="collision" default='"flip"'>
			<desc>
				<p>When the positioned element overflows the window in some direction, move it to an alternative position. Similar to my and at, this accepts a single value or a pair for horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none".</p>
				<ul>
					<li><b>flip</b>: to the opposite side and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.</li>
					<li><b>fit</b>: so the element keeps in the desired direction, but is re-positioned so it fits.</li>
					<li><b>flipfit</b>: apply both flip and fit. If flip works out, fit won't do anything, if flip gives up, fit should help.</li>
					<li><b>none</b>: no collision detection.</li>
				</ul>
			</desc>
			<type name="String" />
		</option>
		<option name="using" default='null'>
			<desc>
				When specified the actual property setting is delegated to this callback. Receives two parameters: The first is a hash of top and left values for the position that should be set and can be forwarded to offset() or animate() calls.
				<p>The second provides feedback about the position and dimensions of both elements, as well as calculations to their relative position. Both `target` and `element` have these properties: element, left, top, width, height. In addition, there's `horizontal`, `vertical` and `important`, giving you twelve potential directions like { horizontal: "center", vertical: "left", important: "horizontal" }.</p>
			</desc>
			<type name="Function" />
		</option>
		<option name="within" default='window'>
			<desc>Element to position within, affecting collision detection. If you provide a selector or jQuery object, the first matching element will be used.</desc>
			<type name="Selector" />
			<type name="Element" />
			<type name="jQuery" />
		</option>
	</options>
	<example>
		<desc>Clicking on the green element transfers to the other.</desc>
		<code><![CDATA[$("#position1").position({
	my: "center",
	at: "center",
	of: "#targetElement"
});
$("#position2").position({
	my: "left top",
	at: "left top",
	of: "#targetElement"
});
$("#position3").position({
	my: "right center",
	at: "right bottom",
	of: "#targetElement"
});
$(document).mousemove(function(ev){
	$("#position4").position({
		my: "left bottom",
		of: ev,
		offset: "3 -3",
		collision: "fit"
	});
});]]></code>
		<html><![CDATA[
<div id="targetElement">
	<div class="positionDiv" id="position1"></div>
	<div class="positionDiv" id="position2"></div>
	<div class="positionDiv" id="position3"></div>
	<div class="positionDiv" id="position4"></div>
</div>

]]></html>
	</example>
	<category slug="utilities"/>
</entry>
